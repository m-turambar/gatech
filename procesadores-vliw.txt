VLIW se refiere a arquitecturas diseñadas para explotar ILP.

Mientras que un CPU convencional normalmente permite que los programas
se ejecuten en secuencia, un procesador VLIW permite que los programas
especifiquen instrucciones para ejecutarse en paralelo.

Unidades funcionales independientes.........
qué es eso?
Hay muchas en un procesador VLIW

Todas las unidades funcionales comparten el uso de un archivo
de registro grande, común.

El objetivo de esta arquitectura es mejorar el desempeño sin
la complejidad iherente de otros approaches.

------------

Otros approaches para mejorar el desempeño enalgunas arquitecturas:

* Pipelining - descomponer instrucciones en sub-pasos para
que las instrucciones puedan ser ejecutadas parcialmente al
mismo tiempo.

* Arquitecturas superescalaeres - despachan instrucciones
para ser ejecutadas completamente independientemente en
diferentes partes del procesador.

* Ejecución fuera de orden - ejecutar instruccioens en un orden
distinto que el del programa.

-----------

ILP. Paralelismo a nivel de instrucción.

* Es una medida de cuántas operaciones en un programa pueden
ser ejecutadas simultáneamente.

* El traslapo entre instrucciones se llama ILP

* Un programa normal típicamente es escrito bajo un modelo de
ejecución secuencial donde las isntrucciones ejecutan una
después de la otra en el orden especificado por el programador.

* El objetivo del compilador y los inges diseñando procesadores
con ILP es identificar y aprovechar tanto ILP como sea
posible.

-----------

Considere el siguiente programa:

op1		e = a + b
op2		f = c + d
op3		m = e * f

* La operación 3 depende del resultado de las operaciones 1
y 2, por lo que no puede ser calculada hasta que ambas estén
completadas.

* Pero las ops 1 y 2 no dependen mutuamente por lo que 
pueden ejecutarse simultáneamente

* Si asumiéramos que cada operación puede ser ejecutada en
una unidad de tiempo, entonces estas tres instrucciones
podrían ser completadas en un total de dos unidades de
tiempo.

* Dando un ILP de 3 / 2. wwhhooooa.

----------

* El compilador es responsable por el "agendamiento estático"
de instrucciones en un procesador VLIW

* El compilador descubre qué operaciones pueden ejecutarse
en paralelo en el programa.

* Las agrupa (estas operaciones) en una única instrucción,
que es la "very large instruction word", osea, una especie
de superinstrucción, superlarga, superconfundido.
word de instrucción muy larga. O no sería una word de
32 bits? Estamos por descubrirlo.

* El compilador se asegura de que una operación no es
emitida antes de que sus operandos estén listos.

----------

Instrucción VLIW.

* Una instrucción VLIW codifica múltiples operaciones,
y van a iniciar en el mismo único ciclo de reloj.

* Los operandos y la operación a ser ejecutada por las
varias unidades funcionales son especificadas en la propia
instrucción.

* Una instrucción codifica por lo menos una operación por
cada unidad de ejecución del dispositivo
¿Qué es una unidad de ejecución?

** El tamaño de la instrucción aumenta con el número de
unidades de ejecución.

* Para acomodar estos campos de operación, las instrucciones
VLIW usualmente tienen por lo menos 64 bits de ancho, y,
vaya, en algunas arquitecturas llegan hasta los 1024 bits.
woot!.

----------

Instrucción VLIW

Add r1,r2,r3; Sub r4,r5,r6; Ld r7,data; St r8,data
********* Register files *************************
*** ALU ********* ALU ******** Ld/St ***** Ld/St *

----------

ILP en VLIW

* Considere el cálculo:

y = a1x1 + a2x2 + a3x3

En un procesador secuencial:
# de ciclo:	operación
1	load a1
2	load x1
3	load a2
4	load x2
5	mult z1 a1 x1
6	mult z2 a2 x2
7 	suma y z1 z2
8	load a3
9	load x3
10	mult z1 a3 x3
11	suma y y z1

En un procesador VLIW, con 2 undiades de Ld/St, una de
mult, y 1 de suma:

1	load a1
	load x1
2	load a2
	load x2
	mult y a1 x1
3	load a3
	load x3
	mult y2 a2 x2
4	add y y y2
	mult y3 a3 x3
5	add y y y3

Podemos ver que hubo un incremento en la eficacia cuando
usamos VLIW.

------------

Diagrama de bloques

PCU 	= Program Control Unit
MpRF 	= Multi-ported Register File
R/W CB 	= Read/Write Cross Bar
FUs 	= Functional units {1...n}
ICache	= Instruction Cache

*******        ********
*     * ------>* MpRF *
*     *        ********  
*     *          |   |
* PCU *        **********
*     *        * R/W CB *
*     *        **********
*     *          |   |
*     *        *******************
*     *        * FU1 * ... * FUn *
*     *        *******************
*     *          ^  ^  ^
*     *          |  |  |
*     *        **********
*     * ------>* ICache *
*     *        **********
*******

-----------

Diagrama

Instrucciones		Instrucciones FX		Instrucciones FP

|      |            |		|				|		|
  
EU ... EU			FX ... FX				FP ... FP
           			EU ... EU				EU ... EU

|      |			|		|				|		|

Register file		FX reg. file			FP reg. file

-----------

Trabajando

* Las LIW son fetcheadas de memoria (Long instr word)

* Un archivo de registro común, "multi-porteado", para
fetchear los operando y guardar lso resultados.
... es? o qué? slides de becarios

* El acceso en paralelo al archivo de registro es posible
gracias al cross bar r/w

* Ejecución en las unidades funciones se lleva a cabo
concurrentemente con la operación load/store entre RAM y
el archivo del registro

* Uno o más archivos de registro para los datos FX y FP.

* "Depender" (wtf, annoying) en el compilador para encontrar
paralelismo y generar código sin dependencias.

-----------

Diferencias entre VLIW y arq. superescalar

Hay un diagrama muy grande que *NO* voy a transcribir.
Pero, a grandes razgos, estos son los puntos que aprecio.

+ Ambas arq. tienen archivos de registro, y ambas tienen
EUs, que sigo sin saber qué significan. Execution Unit?

Ya, parece que la diferencia está en el pipeline? Uno parece
ser secuencial (superscalar) y el otro paralelo (VLIW).

- Superescalar tiene una unidad adicional, la Decode/
Issue unit. De esta salen varias instrucciones, que van
a diferentes EUs

+ Ambas tienen una unidad de Fetch, que va alimentada de
Cache/Memoria. Pos sí no?

------------

VLIW vs Superscalar arch.

** Formulación de instrucciones

* Superscalar: Recive instrucciones convencionales 
concebidas para procesadores secuenciales

* VLIW: Recibe words de instrucciones largas, cada una
comprendiendo un campo (o un opcode) para cada unidad de
ejecución (EU).
La longitud de la instrucción depende del número de EUs,
y el tamaño del código para controlar cada unidad, (creo
que empiezo a entenderle), tal como la longitud del opcode.
64 - 1024 bits es lo normal, mucho más grandes que las words
convencionales.

** Agendar instrucciones

* Superscalar:
Se hace de forma dinámica en runtime por el hardware
Las dependencias de datos se checan y resuelven en hardware
Se necesita una "look ahead hardware window" para fetchear
instrucciones

* VLIW:
Se hace de forma estática por el compilador.
Las dependencias se checan por el compilador.
En caso de que opcodes no se llenen, se desperdicia ancho
de banda de la instrucción.

------------

** Comparación: 	CISC	RISC	VLIW

Es difícil escribir la tabla aquí, así que la redactaré:

* Tamaño de la instrucción: En CISC varía, en RISC es un
tamaño, usualmente 32 bits, en VLIW es "un tamaño", whatever
that means.

* Semántica de las instrucciones: En CISC varía de "simple"
a "compleja"; posiblemente muchas operaciones dependientes
por instrucción. En RISC, casi siempre es una operación
simple, en VLIW son muchas simples operaciones indepen-
dientes entre sí.

No estoy entendiendo mucho.

* Registros: 
En CISC hay pocos, algunas veces especiales.
En RISC hay muchos multipropósito (ARM v7?)
En VLIW también hay muchos multipropósito

* Diseño del hardware
En CISC, se explotan implementaciones de microcódigo (?)
En RISC, se explotan implementaciones con un pipeline
y no hay microcódigo
En VLIW, se explotan implementaciones con múltiples
pipelines, sin microcódigo, y sin lógica compleja de
despachamiento de instrucciones.

--------------

** Ventajas del VLIW

* Las dependencias son determinadas por el compilador.

* Las unidades de las funciones (?), son asignadas por el
compilador, y corresponden a la posición dentro del paquete
de instrucciones

* Reduce la complejidad del hardware
-Las tareas como decodificar, detección de dependencias de
datos, problemas de isntrucciones, etc, se vuelven simples.
-Asegura potencialmente un reloj más rápido (?)
-Asegura bajo consumo de poder.

-------------

** Desventajas de VLIW

Mayor complejidad del compilador

Compatibilidad entre implementaciones: Las optimizaciones del

ya me harté. putos perros ladrando. no puedo concentrarme.




















