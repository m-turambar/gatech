VLIW se refiere a arquitecturas diseñadas para explotar ILP.

Mientras que un CPU convencional normalmente permite que los programas
se ejecuten en secuencia, un procesador VLIW permite que los programas
especifiquen instrucciones para ejecutarse en paralelo.

Unidades funcionales independientes.........
qué es eso?
Hay muchas en un procesador VLIW

Todas las unidades funcionales comparten el uso de un archivo
de registro grande, común.

El objetivo de esta arquitectura es mejorar el desempeño sin
la complejidad iherente de otros approaches.

------------

Otros approaches para mejorar el desempeño enalgunas arquitecturas:

* Pipelining - descomponer instrucciones en sub-pasos para
que las instrucciones puedan ser ejecutadas parcialmente al
mismo tiempo.

* Arquitecturas superescalaeres - despachan instrucciones
para ser ejecutadas completamente independientemente en
diferentes partes del procesador.

* Ejecución fuera de orden - ejecutar instruccioens en un orden
distinto que el del programa.

-----------

ILP. Paralelismo a nivel de instrucción.

* Es una medida de cuántas operaciones en un programa pueden
ser ejecutadas simultáneamente.

* El traslapo entre instrucciones se llama ILP

* Un programa normal típicamente es escrito bajo un modelo de
ejecución secuencial donde las isntrucciones ejecutan una
después de la otra en el orden especificado por el programador.

* El objetivo del compilador y los inges diseñando procesadores
con ILP es identificar y aprovechar tanto ILP como sea
posible.

-----------

Considere el siguiente programa:

op1		e = a + b
op2		f = c + d
op3		m = e * f

* La operación 3 depende del resultado de las operaciones 1
y 2, por lo que no puede ser calculada hasta que ambas estén
completadas.

* Pero las ops 1 y 2 no dependen mutuamente por lo que 
pueden ejecutarse simultáneamente

* Si asumiéramos que cada operación puede ser ejecutada en
una unidad de tiempo, entonces estas tres instrucciones
podrían ser completadas en un total de dos unidades de
tiempo.

* Dando un ILP de 3 / 2. wwhhooooa.

----------

* El compilador es responsable por el "agendamiento estático"
de instrucciones en un procesador VLIW

* El compilador descubre qué operaciones pueden ejecutarse
en paralelo en el programa.

* Las agrupa (estas operaciones) en una única instrucción,
que es la "very large instruction word", osea, una especie
de superinstrucción, superlarga, superconfundido.
word de instrucción muy larga. O no sería una word de
32 bits? Estamos por descubrirlo.

* El compilador se asegura de que una operación no es
emitida antes de que sus operandos estén listos.

----------

Instrucción VLIW.

* Una instrucción VLIW codifica múltiples operaciones,
y van a iniciar en el mismo único ciclo de reloj.

* Los operandos y la operación a ser ejecutada por las
varias unidades funcionales son especificadas en la propia
instrucción.

* Una instrucción codifica por lo menos una operación por
cada unidad de ejecución del dispositivo
¿Qué es una unidad de ejecución?

** El tamaño de la instrucción aumenta con el número de
unidades de ejecución.

* Para acomodar estos campos de operación, las instrucciones
VLIW usualmente tienen por lo menos 64 bits de ancho, y,
vaya, en algunas arquitecturas llegan hasta los 1024 bits.
woot!.

----------

Instrucción VLIW

Add r1,r2,r3; Sub r4,r5,r6; Ld r7,data; St r8,data
********* Register files *************************
*** ALU ********* ALU ******** Ld/St ***** Ld/St *

----------

ILP en VLIW

* Considere el cálculo:

y = a1x1 + a2x2 + a3x3

En un procesador secuencial:
# de ciclo:	operación
1	load a1
2	load x1
3	load a2
4	load x2
5	mult z1 a1 x1
6	mult z2 a2 x2
7 	suma y z1 z2
8	load a3
9	load x3
10	mult z1 a3 x3
11	suma y y z1

En un procesador VLIW, con 2 undiades de Ld/St, una de
mult, y 1 de suma:

1	load a1
	load x1
2	load a2
	load x2
	mult y a1 x1
3	load a3
	load x3
	mult y2 a2 x2
4	add y y y2
	mult y3 a3 x3
5	add y y y3

Podemos ver que hubo un incremento en la eficacia cuando
usamos VLIW.

------------

Diagrama de bloques

PCU 	= Program Control Unit
MpRF 	= Multi-ported Register File
R/W CB 	= Read/Write Cross Bar
FUs 	= Functional units {1...n}
ICache	= Instruction Cache

*******        ********
*     * ------>* MpRF *
*     *        ********  
*     *          |   |
* PCU *        **********
*     *        * R/W CB *
*     *        **********
*     *          |   |
*     *        *******************
*     *        * FU1 * ... * FUn *
*     *        *******************
*     *          ^  ^  ^
*     *          |  |  |
*     *        **********
*     * ------>* ICache *
*     *        **********
*******
